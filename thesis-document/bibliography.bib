@misc{rfcOauth2,
  series = {Request for Comments},
  number = 6749,
  howpublished = {RFC 6749},
  publisher = {RFC Editor},
  doi = {10.17487/RFC6749},
  url = {https://www.rfc-editor.org/info/rfc6749},
  author = {Dick Hardt},
  title = {{The OAuth 2.0 Authorization Framework}},
  pagetotal = 76,
  year = 2012,
  month = oct,
  abstract = {The OAuth 2.0 authorization framework enables a third-party
              application to obtain limited access to an HTTP service, either on
              behalf of a resource owner by orchestrating an approval interaction
              between the resource owner and the HTTP service, or by allowing the
              third-party application to obtain access on its own behalf. This
              specification replaces and obsoletes the OAuth 1.0 protocol
              described in RFC 5849. {[}STANDARDS-TRACK{]}},
}

@misc{rfc7519,
  series = {Request for Comments},
  number = 7519,
  howpublished = {RFC 7519},
  publisher = {RFC Editor},
  doi = {10.17487/RFC7519},
  url = {https://www.rfc-editor.org/info/rfc7519},
  author = {Michael B. Jones and John Bradley and Nat Sakimura},
  title = {{JSON Web Token (JWT)}},
  pagetotal = 30,
  year = 2015,
  month = may,
  abstract = {JSON Web Token (JWT) is a compact, URL-safe means of representing
              claims to be transferred between two parties. The claims in a JWT
              are encoded as a JSON object that is used as the payload of a JSON
              Web Signature (JWS) structure or as the plaintext of a JSON Web
              Encryption (JWE) structure, enabling the claims to be digitally
              signed or integrity protected with a Message Authentication Code
              (MAC) and/or encrypted.},
}

@misc{OpenIDConnectCore,
  author = {OpenID Foundation},
  title = {OpenID Connect Core 1.0},
  howpublished = {\url{https://openid.net/specs/openid-connect-core-1_0.html}},
  year = {2014},
  note = {Accessed [Insert Date of Access Here]},
}

@misc{rfcPkce,
  series = {Request for Comments},
  number = 7636,
  howpublished = {RFC 7636},
  publisher = {RFC Editor},
  doi = {10.17487/RFC7636},
  url = {https://www.rfc-editor.org/info/rfc7636},
  author = {Nat Sakimura and John Bradley and Naveen Agarwal},
  title = {{Proof Key for Code Exchange by OAuth Public Clients}},
  pagetotal = 20,
  year = 2015,
  month = sep,
  abstract = {OAuth 2.0 public clients utilizing the Authorization Code Grant
              are susceptible to the authorization code interception attack. This
              specification describes the attack as well as a technique to
              mitigate against the threat through the use of Proof Key for Code
              Exchange (PKCE, pronounced "pixy").},
}
https://datubaze.wordpress.com/wp-content/uploads/2020/01/celkos-sql-for-smarties-2005.pdf
@book{celkoSQLTrees,
  added-at = {2011-05-17T13:35:45.000+0200},
  asin = {1558609202},
  author = {Celko, Joe},
  biburl = {
            https://www.bibsonomy.org/bibtex/2fb4ae39e53479e1099935d75506c0ffd/nosebrain
            },
  dewey = {005.133},
  ean = {9781558609204},
  edition = 1,
  interhash = {e50c2af413e3f7623921a36383cfcc97},
  intrahash = {fb4ae39e53479e1099935d75506c0ffd},
  isbn = {9781558609204},
  keywords = {hierarchy sql tree},
  publisher = {Morgan Kaufmann},
  timestamp = {2011-05-17T13:35:45.000+0200},
  title = {Joe Celko's Trees and Hierarchies in SQL for Smarties, (The Morgan
           Kaufmann Series in Data Management Systems)},
  url = {
         http://www.amazon.com/Hierarchies-Smarties-Kaufmann-Management-Systems/dp/1558609202
         },
  year = 2004,
}

https://dl.acm.org/doi/abs/10.1145/1862372.1862393
@inproceedings{multi-tenant-dream-or-nightmare,
  author = {Bezemer, Cor-Paul and Zaidman, Andy},
  title = {Multi-tenant SaaS applications: maintenance dream or nightmare?},
  year = {2010},
  isbn = {9781450301282},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/1862372.1862393},
  doi = {10.1145/1862372.1862393},
  abstract = {Multi-tenancy is a relatively new software architecture principle
              in the realm of the Software as a Service (SaaS) business model. It
              allows to make full use of the economy of scale, as multiple
              customers - "tenants" - share the same application and database
              instance. All the while, the tenants enjoy a highly configurable
              application, making it appear that the application is deployed on a
              dedicated server. The major benefits of multi-tenancy are increased
              utilization of hardware resources and improved ease of maintenance,
              in particular on the deployment side. These benefits should result
              in lower overall application costs, making the technology
              attractive for service providers targeting small and medium
              enterprises (SME). However, as this paper advocates, a wrong
              architectural choice might entail that multi-tenancy becomes a
              maintenance nightmare.},
  booktitle = {Proceedings of the Joint ERCIM Workshop on Software Evolution
               (EVOL) and International Workshop on Principles of Software
               Evolution (IWPSE)},
  pages = {88â€“92},
  numpages = {5},
  location = {Antwerp, Belgium},
  series = {IWPSE-EVOL '10},
}

@article{Pushpan2024MultiTenantArchitecture,
  author = {Shinu Pushpan},
  title = {Multi-Tenant Architecture: A Comprehensive Framework for Building
           Scalable SaaS Applications},
  journal = {International Journal of Scientific Research in Computer Science,
             Engineering and Information Technology},
  year = {2024},
  volume = {10},
  number = {6},
  pages = {1117-1126},
  url = {
         https://ijsrcseit.com/index.php/home/article/view/CSEIT241061151/CSEIT241061151
         },
}


@book{Silberschatz2010,
  added-at = {2010-07-18T14:00:17.000+0200},
  address = {New York},
  author = {Silberschatz, Abraham and Korth, Henry F. and Sudarshan, S.},
  biburl = {
            https://www.bibsonomy.org/bibtex/2f918632bd9810e92303843bba065d27d/voj
            },
  edition = 6,
  interhash = {f7b2016b63d72e5cfd3bc55af1deedbb},
  intrahash = {f918632bd9810e92303843bba065d27d},
  keywords = {databases textbook},
  publisher = {McGraw-Hill},
  timestamp = {2010-07-18T14:00:17.000+0200},
  title = {Database system concepts},
  url = {http://www.db-book.com/},
  year = 2010,
}

@article{Tsai2014,
  author = {Tsai, WeiTek and Bai, XiaoYing and Huang, Yu},
  title = {Software-as-a-service (SaaS): perspectives and challenges},
  journal = {Science China Information Sciences},
  year = {2014},
  month = {May},
  day = {01},
  volume = {57},
  number = {5},
  pages = {1-15},
  abstract = {Software-as-a-service (SaaS) has received significant attention
              recently as one of three principal components of cloud computing,
              and it often deals with applications that run on top of a
              platform-as-a-service (PaaS) that in turn runs on top of
              infrastructure-as-a-service (IaaS). This paper provides an overview
              of SaaS including its architecture and major technical issues such
              as customization, multi-tenancy architecture, redundancy and
              recovery mechanisms, and scalability. Specifically, a SaaS system
              can have architecture relating to a database-oriented approach,
              middleware-oriented approach, service-oriented approach, or
              PaaS-oriented approach. Various SaaS customization strategies can
              be used from light customization with manual coding to heavy
              customization where the SaaS system and its underlying PaaS systems
              are customized together. Multi-tenancy architecture is an important
              feature of a SaaS and various trade-offs including security
              isolation, performance, and engineering effort need to be
              considered. It is important for a SaaS system to have multi-level
              redundancy and recovery mechanisms, and the SaaS system needs to
              coordinate these with the underlying PaaS system. Finally, SaaS
              scalability mechanisms include a multi-level architecture with load
              balancers, automated data migration, and software design
              strategies.},
  issn = {1869-1919},
  doi = {10.1007/s11432-013-5050-z},
  url = {https://doi.org/10.1007/s11432-013-5050-z},
}

